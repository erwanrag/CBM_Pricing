name: CBM Pricing CI/CD

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  PYTHON_VERSION: "3.11"
  NODE_VERSION: "20"

jobs:
  # === BACKEND TESTS ===
  backend-tests:
    runs-on: ubuntu-latest
    
    services:
      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: 📥 Checkout
        uses: actions/checkout@v4

      - name: 🐍 Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: 📦 Cache pip dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}

      - name: 📥 Install dependencies
        working-directory: backend
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pytest-cov

      - name: 🧪 Run backend tests with coverage
        working-directory: backend
        env:
          REDIS_URL: redis://localhost:6379
          CBM_ENV: test
        run: |
          pytest tests/ --cov=app --cov-report=xml --cov-report=html --cov-fail-under=80 -v

      - name: 📊 Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: backend/coverage.xml
          flags: backend

      - name: 🧼 Run Black formatter check
        working-directory: backend
        run: |
          pip install black
          black --check --diff app/

      - name: 🔍 Run Flake8 linter
        working-directory: backend
        run: |
          pip install flake8
          flake8 app/ --max-line-length=100 --exclude=__pycache__

  # === FRONTEND TESTS ===
  frontend-tests:
    runs-on: ubuntu-latest
    
    steps:
      - name: 📥 Checkout
        uses: actions/checkout@v4

      - name: 🟢 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json

      - name: 📦 Install frontend dependencies
        working-directory: frontend
        run: npm ci --legacy-peer-deps

      - name: 🧪 Run frontend tests
        working-directory: frontend
        run: npm run test -- --coverage --watchAll=false

      - name: 🧼 Run Prettier check
        working-directory: frontend
        run: npm run format -- --check

      - name: 🔍 Run ESLint
        working-directory: frontend
        run: npm run lint

      - name: 🛠️ Build frontend
        working-directory: frontend
        run: npm run build

      - name: 📊 Upload frontend coverage
        uses: codecov/codecov-action@v3
        with:
          file: frontend/coverage/lcov.info
          flags: frontend

  # === SECURITY SCAN ===
  security-scan:
    runs-on: ubuntu-latest
    needs: [backend-tests, frontend-tests]
    
    steps:
      - name: 📥 Checkout
        uses: actions/checkout@v4

      - name: 🔒 Run Bandit security scan
        working-directory: backend
        run: |
          pip install bandit
          bandit -r app/ -f json -o bandit-report.json || true

      - name: 🔍 Run npm audit
        working-directory: frontend
        run: npm audit --audit-level=high

  # === BUILD & DEPLOY (only on main) ===
  build-deploy:
    runs-on: ubuntu-latest
    needs: [backend-tests, frontend-tests, security-scan]
    if: github.ref == 'refs/heads/main'
    
    steps:
      - name: 📥 Checkout
        uses: actions/checkout@v4

      - name: 🟢 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: 📦 Install and build frontend
        working-directory: frontend
        run: |
          npm ci --legacy-peer-deps
          npm run build

      - name: 📊 Analyze bundle size
        working-directory: frontend
        run: |
          npx vite-bundle-analyzer dist/stats.html

      - name: 🚀 Deploy notification
        run: |
          echo "✅ Build successful - Ready for production deployment"
          echo "🔗 Artifact: Frontend build in dist/"